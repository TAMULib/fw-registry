{
  "id": "18d0e1eb-46c2-4a9e-8838-88584d7998cd",
  "name": "Query Student Patrons",
  "description": "Executes query on student patrons from DivIT database.",
  "deserializeAs": "DatabaseQueryTask",
  "inputVariables": [],
  "outputVariable": {
    "key": "studentPatrons",
    "type": "PROCESS"
  },
  "designation": "divit",
  "query": "SELECT DISTINCT CASE WHEN stu.tamu_netid IS NOT NULL THEN stu.tamu_netid ELSE stu.uin END AS username, stu.uin AS externalSystemId, CASE WHEN pi.id_card_num IS NOT NULL THEN pi.id_card_num ELSE stu.uin END AS barcode, 'true' AS active, CASE WHEN substring(stu.classification, 1, 1) IN('D', 'G', 'L', 'M', 'P', 'V') THEN 'grad' WHEN substring(stu.classification, 1, 1) IN ('I', 'U') THEN 'ungr' END AS patronGroup, stu.last_name AS personal_lastName, stu.first_name AS personal_firstName, stu.middle_name AS personal_middleName, stu.tamu_preferred_alias AS personal_email, stu.local_phone AS personal_phone, 'Permanent' AS addresses_permanent_addressTypeId, stu.perm_country AS addresses_permanent_countryId, stu.perm_street1 AS addresses_permanent_addressLine1, stu.perm_street2 + ' ' + stu.perm_street3 AS addresses_permanent_addressLine2, stu.perm_city AS addresses_permanent_city, stu.perm_state AS addresses_permanent_region, stu.perm_zip AS addresses_permanent_postalCode, 'Temporary' AS addresses_temporary_addressTypeId, stu.local_street1 AS addresses_temporary_addressLine1, stu.local_street2 + ' ' + stu.local_street3 AS addresses_temporary_addressLine2, stu.local_city AS addresses_temporary_city, stu.local_state AS addresses_temporary_region, stu.local_zip AS addresses_temporary_postalCode, stu.acad_dept AS departments_0, CASE WHEN CAST('1970-02-11' AS DATE) <= DATEADD(YEAR, -18, CAST(GETDATE() AS DATE)) THEN 'true' ELSE 'false' END AS is_over_18, format(getdate() + 200, 'yyyy-MM-dd') AS expirationDate FROM itsql.cis.patron.students stu LEFT OUTER JOIN itsql.cis.patron.employees_retirees emp ON stu.uin = emp.uin LEFT OUTER JOIN itsql.cis.patron.person_identifiers pi ON stu.uin = pi.uin WHERE stu.enroll_status_name IN ('Enrolled', 'Not Enrolled') AND ( emp.employee_type = 1 OR emp.uin IS NULL OR emp.employee_type IS NULL) AND stu.last_name IS NOT NULL",
  "asyncBefore": true
}
